// Code generated by MockGen. DO NOT EDIT.
// Source: internal/maroon/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/maroon/interface.go -destination=internal/maroon/mocks/interface_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	clientv3 "go.etcd.io/etcd/client/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockETCD is a mock of ETCD interface.
type MockETCD struct {
	ctrl     *gomock.Controller
	recorder *MockETCDMockRecorder
	isgomock struct{}
}

// MockETCDMockRecorder is the mock recorder for MockETCD.
type MockETCDMockRecorder struct {
	mock *MockETCD
}

// NewMockETCD creates a new mock instance.
func NewMockETCD(ctrl *gomock.Controller) *MockETCD {
	mock := &MockETCD{ctrl: ctrl}
	mock.recorder = &MockETCDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockETCD) EXPECT() *MockETCDMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockETCD) Put(ctx context.Context, key, val string, opts ...clientv3.OpOption) (*clientv3.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, val}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*clientv3.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockETCDMockRecorder) Put(ctx, key, val any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, val}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockETCD)(nil).Put), varargs...)
}
