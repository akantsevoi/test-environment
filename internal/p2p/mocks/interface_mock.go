// Code generated by MockGen. DO NOT EDIT.
// Source: internal/p2p/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/p2p/interface.go -destination=internal/p2p/mocks/interface_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	p2p "github.com/akantsevoi/test-environment/internal/p2p"
	gomock "go.uber.org/mock/gomock"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
	isgomock struct{}
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// DistributeTx mocks base method.
func (m_2 *MockTransport) DistributeTx(m p2p.Transaction) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "DistributeTx", m)
}

// DistributeTx indicates an expected call of DistributeTx.
func (mr *MockTransportMockRecorder) DistributeTx(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTx", reflect.TypeOf((*MockTransport)(nil).DistributeTx), m)
}

// Start mocks base method.
func (m *MockTransport) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockTransportMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTransport)(nil).Start))
}

// Stop mocks base method.
func (m *MockTransport) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTransportMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTransport)(nil).Stop))
}

// UpdateHosts mocks base method.
func (m *MockTransport) UpdateHosts(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHosts", arg0)
}

// UpdateHosts indicates an expected call of UpdateHosts.
func (mr *MockTransportMockRecorder) UpdateHosts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHosts", reflect.TypeOf((*MockTransport)(nil).UpdateHosts), arg0)
}
